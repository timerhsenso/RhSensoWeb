@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Env

@Html.Raw($"<!-- // {Env.EnvironmentName} // -->")

<!DOCTYPE html>

@{
    var html_attributes = ViewBag.HTMLAttributes != null ? ViewBag.HTMLAttributes : "";
    var html_class = ViewBag.HTMLClass != null ? ViewBag.HTMLClass : "";
}

<html lang="en" class="@html_class" @html_attributes>

<head>
    
    @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_TitleMeta.cshtml  Debug // -->") }
    @await Html.PartialAsync("~/Views/Shared/Partials/_TitleMeta.cshtml")

    @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // RenderSection(Styles, false)  Debug // -->") }
    @RenderSection("Styles", false)

    @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_HeadCSS.cshtml  Debug // -->") }
    @await Html.PartialAsync("~/Views/Shared/Partials/_HeadCSS.cshtml")

    <!--
    <style>
        .breadcrumb-item + .breadcrumb-item::before {
            content: "";
        }
    </style>
    -->

</head>

<body>

    <div class="wrapper">

        @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_TopBar.cshtml Debug // -->") }
        @await Html.PartialAsync("~/Views/Shared/Partials/_TopBar.cshtml")

        @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_SideNav.cshtml Debug // -->") }
        @await Html.PartialAsync("~/Views/Shared/Partials/_SideNav.cshtml")

        <div class="content-page">

            @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // RenderBody() // -->") }
            @RenderBody()

            @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_Footer.cshtml Debug // -->") }
            @await Html.PartialAsync("~/Views/Shared/Partials/_Footer.cshtml")

        </div>

        @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_ConfirmModal.cshtml  Debug // -->") }
        @await Html.PartialAsync("~/Views/Shared/Partials/_ConfirmModal.cshtml")

    </div>

    @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_Customizer.cshtml  Debug // -->") }
    @await Html.PartialAsync("~/Views/Shared/Partials/_Customizer.cshtml")

    @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_ShowDebug.cshtml  Debug // -->") }
    @await Html.PartialAsync("~/Views/Shared/Partials/_ShowDebug.cshtml")

    @await Html.PartialAsync("~/Views/Shared/Partials/_FormModal.cshtml")       
    
    @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // ~/Views/Shared/Partials/_FooterScripts.cshtml  Debug // -->") }
    @await Html.PartialAsync("~/Views/Shared/Partials/_FooterScripts.cshtml")    

    @if (Env.EnvironmentName == "Development") { @Html.Raw("<!-- // RenderSection(Scripts, required: false)  Debug // -->") }
    @RenderSection("Scripts", required: false)

    @await Html.PartialAsync("~/Views/Shared/Partials/_ColVisModal.cshtml")


    <script type="module">
        import { initColVis } from '/js/colvis.js';

        const modal  = document.getElementById('colVisModal');
        const holder = modal.querySelector('#colvis-holder');

        // Abre o modal e monta o seletor
        modal.addEventListener('shown.bs.modal', (ev) => {
          let tableSel = ev.relatedTarget?.getAttribute('data-table') || modal.dataset.table || null;
          if (!tableSel) {
            const t = document.querySelector('table.dataTable, table[id^="grid"], table[id^="tbl"]');
            if (t?.id) tableSel = `#${t.id}`;
          }
          if (!tableSel) return;

          modal.dataset.table = tableSel;
          holder.innerHTML = '';
          delete holder.dataset.colvisInitialized;

          initColVis({ table: tableSel, holder, placeholder: 'Colunas visíveis' });
        });

        // helper para gerar a mesma "key" do colvis.js
        function slug(s){
          return String(s||'').trim().toLowerCase()
            .normalize('NFD').replace(/[\u0300-\u036f]/g,'')
            .replace(/[^\w]+/g,'-').replace(/(^-|-$)/g,'');
        }

        // ✅ Botão PADRÃO: aplica o conjunto salvo como padrão
        document.getElementById('colvis-reset')?.addEventListener('click', () => {
          const sel = modal.dataset.table;
          if (!(window.jQuery && sel && jQuery.fn.dataTable.isDataTable(sel))) return;

          const dt = jQuery(sel).DataTable();
          const id = dt.settings()[0].sTableId || sel.replace('#','');
          const DEFAULT_KEY = 'colvis:default:' + id;

          let defaultKeys = [];
          try { defaultKeys = JSON.parse(localStorage.getItem(DEFAULT_KEY) || '[]'); } catch {}

          const defSet = new Set(defaultKeys);

          dt.columns().every(function (idx) {
            const th = this.header();
            const title = (th && th.textContent) ? th.textContent.trim() : '';
            const key = th?.dataset?.colKey || slug(title) || ('col-' + idx);
            // se nunca salvou padrão, cai no fallback "tudo visível"
            this.visible(defSet.size ? defSet.has(key) : true, false);
          });
          dt.columns.adjust().draw(false);

          // Atualiza a seleção do usuário com o padrão
          try { localStorage.setItem('colvis:' + id, JSON.stringify(defaultKeys)); } catch {}

          // Reconstrói o select para refletir o reset
          holder.innerHTML = '';
          delete holder.dataset.colvisInitialized;
          initColVis({ table: sel, holder });
        });

        // Limpa o holder ao fechar
        modal.addEventListener('hidden.bs.modal', () => {
          holder.innerHTML = '';
          delete holder.dataset.colvisInitialized;
        });
    </script>





</body>

</html>