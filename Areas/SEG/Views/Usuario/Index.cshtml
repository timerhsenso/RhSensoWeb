@using System.Text.Json
@using RhSensoWeb.Helpers

@{
    ViewBag.Areas = "SEG";
    ViewBag.Views = "Constantes";
    ViewBag.Controller = "Usuario";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    ViewBag.gridName = "#gridUsuario";
    ViewBag.Title = "Usuários";
    ViewBag.SubTitle = "Segurança";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";

    //
}


@{
    var acts = PermissionAccessHelper.GetActions(Context, "SEG", "SEG_USUARIOS");
    ViewBag.iHabilitaBtnNovo = acts.Contains("I");
    ViewBag.iCanDelete = acts.Contains("E");
    ViewBag.iCanEdit = acts.Contains("A");
    ViewBag.iCanExport = acts.Contains("X");
    // ViewBag.HabilitaBtnExportar = acts.Contains("C");

    var perms = new
    {
        canDelete = acts.Contains("E"),
        canEdit = acts.Contains("A")
    };

}


@{
    // URLs da action Create
    var icreateGet = Url.Action("Create", "Usuario", new { area = "SEG" });
    var icreatePost = icreateGet; // se o POST for a mesma rota, reaproveite

    // Parâmetros para o _TopbarSharedGrid
    ViewBag.aHref = icreateGet;            // fallback de navegação
    ViewBag.dataContext = "Usuario";           // mesmo "context" do DTUtil.createAjaxDataTable
    ViewBag.dataTable = "#gridUsuario";      // seletor do DataTable para dar reload após salvar
    ViewBag.dataUseModal = false;                 // true = abrir no modal; false = navegar
    ViewBag.dataTitle = "Novo Usuário";       // título do modal
    ViewBag.dataCreateGet = icreateGet;            // GET que renderiza o formulário (partial quando AJAX)
    ViewBag.dataCreatePost = icreatePost;           // POST que grava
}

@{
    ViewBag.DropdownExtraHtml =
        $"<li><a class=\"dropdown-item\" href=\"{Url.Action("Grupos", "Usuario", new { area = "SEG" })}\">" +
        "<i class=\"fa fa-users\"></i> Opção D</a></li>";
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

@{
    var toggleUrl = Url.Action("UpdateAtivo", "Usuario", new { area = "SEG" });
}

<script>
  const TOGGLE_URL = '@toggleUrl';
</script>


<div class="card shadow-sm">
    <div class="card-body">
        <table id="gridUsuario" class="table table-striped table-hover w-100"></table>
    </div>
</div>

@* Observação:
   Os partials de modal (_FormModal.cshtml e _ConfirmModal.cshtml) devem estar inclusos UMA VEZ no layout (_VerticalLayout),
   antes dos scripts do rodapé. Se não estiverem, o DTUtil cai em fallback de navegação (sem modal). *@

@section Scripts {
    
    <script src="~/js/crud-toggle.js" asp-append-version="true" defer></script>


    <script>
        $(function () {
            const perms = @Html.Raw(JsonSerializer.Serialize(perms));

           // Monte o array de ações de acordo com as permissões (sem "Detalhes")
        const actions = [
            { name:'gotoUserGr', icon:'fa-list', class:'fa-solid fa-people-group', title:'Visualizar Grupos' },
          ...(perms.canEdit   ? [{ name:'edit',   icon:'fa-pen',   class:'btn-outline-primary', title:'Editar'  }] : []),
          ...(perms.canDelete ? [{ name:'delete', icon:'fa-trash', class:'btn-outline-danger',  title:'Excluir' }] : [])
        ];


          // =============================
          // 1) DataTable (DTUtil v4)
          // =============================
          DTUtil.createAjaxDataTable({
            table: '#gridUsuario',
            context: 'Usuario',
            useModal: false,
            rowId: 'cdusuario',
            tokenField: 'token', // se a API devolver "token", o handler abaixo faz fallback
            exportName: 'Usuarios',

            routes: {
              list: '/SEG/Usuario/GetData',
              createGet: '/SEG/Usuario/Create',
              createPost: '/SEG/Usuario/Create',
              editGet: '/SEG/Usuario/Edit/{id}',
              editPost: '/SEG/Usuario/Edit/{id}',
              deletePost: '/SEG/Usuario/DeleteByToken',
              deleteBatchPost: '/SEG/Usuario/DeleteBatch',
              updateAtivoPost: '/SEG/Usuario/UpdateAtivo'
            },

            // Colunas (a 1ª = seleção; a última = ações são geradas pelo DTUtil)
            fields: [
              { data: 'cdusuario', title: 'Código', width: '120px' },
              { data: 'dcusuario', title: 'Nome' },
              { data: 'email_usuario', title: 'Email', defaultContent: '' },
              { data: 'tipo_desc', title: 'Tipo', defaultContent: '' },
              { type: 'toggle', data: 'ativo', title: 'Ativo' }
            ],

            actions: actions

          });

          // ==========================================
          // 2) "Selecionar todos" (só 1ª coluna)
          //    -> NÃO afeta o switch "Ativo"
          // ==========================================
          const $table = $('#gridUsuario');

          // Atualiza estado (checked/indeterminate) do checkbox do cabeçalho
          function updateHeaderState() {
            const $rowChecks = $table.find('tbody td:first-child input.dt-row-select[type=checkbox]');
            const $headCheck = $table.find('thead .check-all');
            const total = $rowChecks.length;
            const marc  = $rowChecks.filter(':checked').length;

            if (!total) {
              $headCheck.prop('checked', false).prop('indeterminate', false);
              return;
            }
            $headCheck.prop('checked', marc > 0 && marc === total);
            $headCheck.prop('indeterminate', marc > 0 && marc < total);
          }

          // Insere o checkbox no 1º <th> quando o DataTable inicializa
          $table.on('init.dt', function () {
            const $th0 = $table.find('thead th').eq(0).addClass('text-center col-select');
            if (!$th0.find('.check-all').length) {
              $th0.html('<input type="checkbox" class="1 check-all" title="Selecionar todos">');
            }
          });

          // Marcar/desmarcar todas as linhas (APENAS 1ª coluna)
          $table.on('change', 'thead .check-all', function () {
            const mark = this.checked;
            $table
              .find('tbody td:first-child input.dt-row-select[type=checkbox]')
              .prop('checked', mark)
              .trigger('change'); // mantém integração com seleção de linha (se existir)
            updateHeaderState();
          });

          // A cada redraw:
          //  - coloca a classe dt-row-select APENAS nos checkboxes da 1ª coluna
          //  - recalcula o estado do cabeçalho
          $table.on('draw.dt', function () {
            $table
              .find('tbody td:first-child input[type=checkbox]')
              .addClass('dt-row-select'); // marcador para diferenciar do switch "Ativo"
            updateHeaderState();
          });

          // Quando o usuário marca/desmarca uma linha individualmente => reflete no cabeçalho
          $table.on('change', 'tbody td:first-child input.dt-row-select[type=checkbox]', updateHeaderState);

          // ==========================================
          // 3) Ações opcionais (ex.: delete/detail)
          // ==========================================
          DTUtil.actions.on('Usuario', 'delete', async ({ id, meta, dt, button }) => {
            const row   = dt.row($(button).closest('tr')).data() || {};
            // fallback para nome do token
            const token = row?.[meta.tokenField] ?? row?.token ?? row?.deleteToken;
            if (!token) return (window.AppNotifier ? AppNotifier.warn('Token ausente para exclusão.') : alert('Token ausente para exclusão.'));

            const ok = window.AppModal?.confirm
              ? await AppModal.confirm('Excluir este registro?')
              : confirm('Excluir este registro?');

            if (!ok) return;

            $.ajax({
              url: meta.routes.deletePost,
              type: 'POST',
              contentType: 'application/json; charset=UTF-8',
              data: JSON.stringify({ token })
            })
            .done(() => {
              window.AppNotifier && AppNotifier.success('Excluído com sucesso.');
              dt.ajax.reload(null, false);
            })
            .fail(xhr => (window.AppAjax ? AppAjax.handleError(xhr) : alert('Erro ao excluir.')));
          });


        DTUtil.actions.on('Usuario', 'gotoUserGr', async ({ id, meta, dt, button }) => {
          try {
            const rowData = dt.row($(button).closest('tr')).data();
            const cdUsuario = rowData.cdusuario;
            const nmUsuario = rowData.dcusuario;

            const titulo = `Grupos de ${nmUsuario || cdUsuario}`;
            const url = `/SEG/UsuarioGrupo/Modal?cdUsuario=${encodeURIComponent(cdUsuario)}&nmUsuario=${encodeURIComponent(nmUsuario || cdUsuario)}`;

            // Verificar se o modal global existe
            if (typeof window.openFormModal === 'function') {
              window.openFormModal(url, titulo);
            } else {
              // Fallback: abrir em nova janela
              window.open(url, '_blank');
            }
          } catch (err) {
            console.error('Erro ao abrir modal:', err);
            toastr.error('Falha ao abrir os grupos do usuário.');
          }
        });





          // ==========================================
          // 4) Busca / limpeza de busca (já usava)
          // ==========================================
          DTUtil.bindInputSearch('#searchGrid', '#gridUsuario');
          DTUtil.bindClearSearch('#btnLimpaPesquisa', '#searchGrid', '#gridUsuario', { reload: true, resetPaging: true });
        });
    </script>


    //

    <script>
// --- Fallback de toastr (caso a lib não esteja carregada nesta tela) ---
window.toastr = window.toastr || {
  error:  (m)=>alert(m),
  success:(m)=>alert(m),
  info:   (m)=>alert(m),
  warning:(m)=>alert(m)
};

// --- Modal genérico (Bootstrap 5) ---
// Carrega uma URL (partial) no corpo do modal e exibe.
window.openFormModal = async function (url, title) {
  const modalEl = document.getElementById('formModal');
  if (!modalEl) { alert('Container #formModal não encontrado.'); return; }

  // título + spinner
  const lbl  = modalEl.querySelector('#formModalLabel');
  const body = modalEl.querySelector('#formModalBody');
  if (lbl)  lbl.textContent = title || 'Formulário';
  if (body) {
    body.innerHTML = `
      <div class="d-flex justify-content-center my-4">
        <div class="spinner-border" role="status" aria-hidden="true"></div>
        <span class="visually-hidden">Carregando...</span>
      </div>`;
  }

  try {
    const resp = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
    const html = await resp.text();
    if (body) body.innerHTML = html;
  } catch (e) {
    if (body) body.innerHTML = `<div class="alert alert-danger">
      Não foi possível carregar o formulário.</div>`;
  }

  const bsModal = bootstrap.Modal.getOrCreateInstance(modalEl, { backdrop: 'static' });
  bsModal.show();
};

// --- Ação "Grupos do Usuário" no grid ---
DTUtil.actions.on('Usuario', 'gotoUserGr', async ({ id, meta, dt, button }) => {
  try {
    // 1) tenta DataTables pela linha do botão
    let rowData = null;
    if (dt && button && typeof dt.row === 'function' && window.jQuery) {
      const $tr = window.jQuery(button).closest('tr');
      rowData = $tr ? dt.row($tr).data() : null;
    }
    // 2) fallback: meta.row ou meta direto
    rowData = rowData || meta?.row || meta || {};

    // 3) valores com tolerância a casing/nomes
    const cdUsuario = (id
      ?? rowData.cdusuario ?? rowData.Cdusuario ?? rowData.CDUSUARIO ?? ''
    ).toString().trim();

    const nmUsuario = (
      rowData.dcusuario ?? rowData.Dcusuario ?? rowData.nome ?? ''
    ).toString().trim();

    if (!cdUsuario) {
      toastr.error('Não foi possível identificar o usuário selecionado.');
      return;
    }

    const titulo = `Grupos de ${nmUsuario || cdUsuario}`;
    const url = `/SEG/UsuarioGrupo/Modal?cdUsuario=${encodeURIComponent(cdUsuario)}&nmUsuario=${encodeURIComponent(nmUsuario || cdUsuario)}`;

    openFormModal(url, titulo);
  } catch (err) {
    console.error(err);
    toastr.error('Falha ao abrir os grupos do usuário.');
  }
});
</script>


}





