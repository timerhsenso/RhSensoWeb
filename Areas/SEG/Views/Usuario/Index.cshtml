@{
    ViewBag.Areas = "SEG";
    ViewBag.Views = "Constantes";
    ViewBag.Controller = "Constantes";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    ViewBag.gridName = "#gridUsuario";    
    ViewBag.Title = "Constantes";
    ViewBag.SubTitle = "Segurança";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<div class="card shadow-sm">
    <div class="card-body">
        <table id="gridUsuario" class="table table-striped table-hover w-100"></table>
    </div>
</div>

@* Observação:
   Os partials de modal (_FormModal.cshtml e _ConfirmModal.cshtml) devem estar inclusos UMA VEZ no layout (_VerticalLayout),
   antes dos scripts do rodapé. Se não estiverem, o DTUtil cai em fallback de navegação (sem modal). *@

@section Scripts {
    <script>
        $(function () {
          // Criação do DataTable (DTUtil v4). O campo "data" do JSON de GetData deve conter a lista.
          DTUtil.createAjaxDataTable({
            table: '@ViewBag.gridName',
            context: 'Usuario',
            useModal: true,             // tenta editar em modal; cai em fallback se AppModal não existir
            rowId: 'cdusuario',         // nome do campo ID que vem no JSON
            tokenField: 'token',        // nome do campo de token para exclusão segura
            exportName: 'Usuarios',     // título nos arquivos exportados

            routes: {
              list: '/SEG/Usuario/GetData',
              editGet: '/SEG/Usuario/Edit/{id}',
              editPost: '/SEG/Usuario/Edit/{id}',
              deletePost: '/SEG/Usuario/DeleteByToken',
              deleteBatchPost: '/SEG/Usuario/DeleteBatch', // opcional; se ausente, o DTUtil faz fallback 1-a-1
              updateAtivoPost: '/SEG/Usuario/UpdateAtivo'
              // detailsGet: '/SEG/Usuario/Details/{id}'    // se existir
            },

            // Colunas centrais (a 1ª é checkbox e a última são ações — geradas automaticamente pelo DTUtil)
            fields: [
              { data: 'cdusuario', title: 'Código', width: '120px' },
              { data: 'dcusuario', title: 'Nome' },
              { data: 'email_usuario', title: 'Email', defaultContent: '' }, // <- evita warning se vier null
              { data: 'tipo_desc', title: 'Tipo', defaultContent: '' }, // <- evita warning se vier null
              { type: 'toggle', data: 'ativo', title: 'Ativo' } // envia POST x-www-form-urlencoded para UpdateAtivo
            ],

            // Ações dinâmicas (podem ser estendidas sem editar o JS)
            actions: [
              { name: 'edit',   icon: 'fa-pen',         class: 'btn-outline-primary',   title: 'Editar'  },
              { name: 'delete', icon: 'fa-trash',       class: 'btn-outline-danger',    title: 'Excluir' }              
            ]
          });

          // (Opcional) Handler específico para delete — os fallbacks já funcionam sem isto
          DTUtil.actions.on('Usuario', 'delete', async ({ id, meta, dt, button }) => {
            const row   = dt.row($(button).closest('tr')).data() || {};
            const token = row?.[meta.tokenField];
            if (!token) return (window.AppNotifier ? AppNotifier.warn('Token ausente para exclusão.') : alert('Token ausente para exclusão.'));
            const ok = window.AppModal?.confirm ? await AppModal.confirm('Excluir este registro?') : confirm('Excluir este registro?');
            if (!ok) return;
            $.ajax({
              url: meta.routes.deletePost,
              type: 'POST',
              contentType: 'application/json; charset=UTF-8',
              data: JSON.stringify({ token })
            }).done(() => {
              window.AppNotifier && AppNotifier.success('Excluído com sucesso.');
              dt.ajax.reload(null, false);
            }).fail(xhr => (window.AppAjax ? AppAjax.handleError(xhr) : alert('Erro ao excluir.')));
          });
          DTUtil.bindInputSearch('#btnPesquisaDT', '#gridUsuario' ); // << aqui
        });
    </script>

}
