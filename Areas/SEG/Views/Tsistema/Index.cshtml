@using RhSensoWeb.Helpers

@{
    ViewBag.Areas = "SEG";
    ViewBag.Views = "Constantes";
    ViewBag.Controller = "Tsistema";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    ViewBag.gridName = "#gridTsistema";
    ViewBag.Title = "Tabela de Sistemas";
    ViewBag.SubTitle = "Segurança";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";

    //
}


@{
    var acts = PermissionAccessHelper.GetActions(Context, "SEG", "SEG_FM_TSISTEMA");
    ViewBag.iHabilitaBtnNovo = acts.Contains("I");
    ViewBag.iCanDelete = acts.Contains("E");
    ViewBag.iCanEdit   = acts.Contains("A");
    // ViewBag.HabilitaBtnExportar = acts.Contains("C");
}


@{
    // URLs da action Create
    var icreateGet = Url.Action("Create", "Tsistema", new { area = "SEG" });
    var icreatePost = icreateGet; // se o POST for a mesma rota, reaproveite

    // Parâmetros para o _TopbarSharedGrid
    ViewBag.aHref = icreateGet;            // fallback de navegação
    ViewBag.dataContext = "Tsistema";           // mesmo "context" do DTUtil.createAjaxDataTable
    ViewBag.dataTable = "#gridTsistema";      // seletor do DataTable para dar reload após salvar
    ViewBag.dataUseModal = true;                 // true = abrir no modal; false = navegar
    ViewBag.dataTitle = "Novo Sistema";       // título do modal
    ViewBag.dataCreateGet = icreateGet;            // GET que renderiza o formulário (partial quando AJAX)
    ViewBag.dataCreatePost = icreatePost;           // POST que grava
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<div class="card shadow-sm">
     <div class="card-body">
        <table id="gridTsistema" class="table table-striped table-hover w-100"></table>
    </div>
</div>

@* Observação:
   Os partials de modal (_FormModal.cshtml e _ConfirmModal.cshtml) devem estar inclusos UMA VEZ no layout (_VerticalLayout),
   antes dos scripts do rodapé. Se não estiverem, o DTUtil cai em fallback de navegação (sem modal). *@

@section Scripts {
    <script>
        $(function () {
          // =============================
          // 1) DataTable (DTUtil v4)
          // =============================
          DTUtil.createAjaxDataTable({
            table: '#gridTsistema',
            context: 'Tsistema',
            useModal: true,
            rowId: 'Cdsistema',
            tokenField: 'deleteToken', // se a API devolver "token", o handler abaixo faz fallback
            exportName: 'Sistemas',

            routes: {
              list: '/SEG/Tsistema/GetData',
              createGet: '/SEG/Tsistema/Create',
              createPost: '/SEG/Tsistema/Create',
              editGet: '/SEG/Tsistema/Edit/{id}',
              editPost: '/SEG/Tsistema/Edit/{id}',
              deletePost: '/SEG/Tsistema/DeleteByToken',
              deleteBatchPost: '/SEG/Tsistema/DeleteBatch',
              updateAtivoPost: '/SEG/Tsistema/UpdateAtivo'
            },

            // Colunas (a 1ª = seleção; a última = ações são geradas pelo DTUtil)
            fields: [
              { data: 'Cdsistema', title: 'Código', width: '120px' },
              { data: 'Dcsistema', title: 'Descrição' },
              { type: 'toggle', data: 'Ativo', title: 'Ativo' }
            ],

            actions: [
              { name: 'edit',   icon: 'fa-pen',         class: 'btn-outline-primary',   title: 'Editar'  },
              { name: 'delete', icon: 'fa-trash',       class: 'btn-outline-danger',    title: 'Excluir' },
              { name: 'detail', icon: 'fa-circle-info', class: 'btn-outline-secondary', title: 'Detalhes' }
            ]
          });

          // ==========================================
          // 2) "Selecionar todos" (só 1ª coluna)
          //    -> NÃO afeta o switch "Ativo"
          // ==========================================
          const $table = $('#gridTsistema');

          // Atualiza estado (checked/indeterminate) do checkbox do cabeçalho
          function updateHeaderState() {
            const $rowChecks = $table.find('tbody td:first-child input.dt-row-select[type=checkbox]');
            const $headCheck = $table.find('thead .check-all');
            const total = $rowChecks.length;
            const marc  = $rowChecks.filter(':checked').length;

            if (!total) {
              $headCheck.prop('checked', false).prop('indeterminate', false);
              return;
            }
            $headCheck.prop('checked', marc > 0 && marc === total);
            $headCheck.prop('indeterminate', marc > 0 && marc < total);
          }

          // Insere o checkbox no 1º <th> quando o DataTable inicializa
          $table.on('init.dt', function () {
            const $th0 = $table.find('thead th').eq(0).addClass('text-center col-select');
            if (!$th0.find('.check-all').length) {
              $th0.html('<input type="checkbox" class="form-check-input check-all" title="Selecionar todos">');
            }
          });

          // Marcar/desmarcar todas as linhas (APENAS 1ª coluna)
          $table.on('change', 'thead .check-all', function () {
            const mark = this.checked;
            $table
              .find('tbody td:first-child input.dt-row-select[type=checkbox]')
              .prop('checked', mark)
              .trigger('change'); // mantém integração com seleção de linha (se existir)
            updateHeaderState();
          });

          // A cada redraw:
          //  - coloca a classe dt-row-select APENAS nos checkboxes da 1ª coluna
          //  - recalcula o estado do cabeçalho
          $table.on('draw.dt', function () {
            $table
              .find('tbody td:first-child input[type=checkbox]')
              .addClass('dt-row-select'); // marcador para diferenciar do switch "Ativo"
            updateHeaderState();
          });

          // Quando o usuário marca/desmarca uma linha individualmente => reflete no cabeçalho
          $table.on('change', 'tbody td:first-child input.dt-row-select[type=checkbox]', updateHeaderState);

          // ==========================================
          // 3) Ações opcionais (ex.: delete/detail)
          // ==========================================
          DTUtil.actions.on('Tsistema', 'delete', async ({ id, meta, dt, button }) => {
            const row   = dt.row($(button).closest('tr')).data() || {};
            // fallback para nome do token
            const token = row?.[meta.tokenField] ?? row?.token ?? row?.deleteToken;
            if (!token) return (window.AppNotifier ? AppNotifier.warn('Token ausente para exclusão.') : alert('Token ausente para exclusão.'));

            const ok = window.AppModal?.confirm
              ? await AppModal.confirm('Excluir este registro?')
              : confirm('Excluir este registro?');

            if (!ok) return;

            $.ajax({
              url: meta.routes.deletePost,
              type: 'POST',
              contentType: 'application/json; charset=UTF-8',
              data: JSON.stringify({ token })
            })
            .done(() => {
              window.AppNotifier && AppNotifier.success('Excluído com sucesso.');
              dt.ajax.reload(null, false);
            })
            .fail(xhr => (window.AppAjax ? AppAjax.handleError(xhr) : alert('Erro ao excluir.')));
          });

          DTUtil.actions.on('Tsistema', 'detail', async ({ id/*, meta, dt, button */ }) => {
            alert('detail ' + id);
          });

          // ==========================================
          // 4) Busca / limpeza de busca (já usava)
          // ==========================================
          DTUtil.bindInputSearch('#searchGrid', '#gridTsistema');
          DTUtil.bindClearSearch('#btnLimpaPesquisa', '#searchGrid', '#gridTsistema', { reload: true, resetPaging: true });
        });
    </script>


}
