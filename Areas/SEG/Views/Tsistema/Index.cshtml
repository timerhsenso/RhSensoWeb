@{
    // CONFIGURAÇÃO DA VIEW - Personalize para sua entidade
    ViewBag.Areas = "SEG";
    ViewBag.Views = "Tsistema";
    ViewBag.Controller = "Tsistema";
    ViewBag.Icon = "monitor-smartphone";
    ViewBag.Title = "Tabela de Sistemas";
    ViewBag.SubTitle = "Segurança";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

@section Styles {
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.8/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.bootstrap5.min.css" />

    <!-- Custom CRUD Styles -->
    <link href="~/css/crud.css" rel="stylesheet" />
    <link href="~/css/datatables-advanced.css" rel="stylesheet" />

    <style>
        /* Estilos específicos da página */
        .crud-actions {
            white-space: nowrap;
        }

        .status-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
        }

        .table-responsive {
            border-radius: 0.375rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .custom-filters {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
            border: 1px solid #dee2e6;
        }

        .filter-group {
            display: flex;
            gap: 0.5rem;
            align-items-end;
            flex-wrap: wrap;
        }

        .filter-item {
            min-width: 120px;
        }

        /* Loading overlay */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

            .loading-overlay.d-none {
                display: none !important;
            }
    </style>
}

<!-- Container de Toast para Notificações -->
@await Html.PartialAsync("~/Views/Shared/Partials/_ToastContainer.cshtml")

<!-- Título da Página -->
@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

<!-- Barra de Ferramentas -->
@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<!-- Filtros Personalizados (opcional) -->
<div class="container-fluid">
    <div class="custom-filters d-none" id="customFilters">
        <div class="row">
            <div class="col-md-12">
                <div class="filter-group">
                    <div class="filter-item">
                        <label class="form-label small">Status:</label>
                        <select class="form-select form-select-sm" id="filterStatus">
                            <option value="">Todos</option>
                            <option value="true">Ativo</option>
                            <option value="false">Inativo</option>
                        </select>
                    </div>

                    <div class="filter-item">
                        <label class="form-label small">Período:</label>
                        <input type="date" class="form-control form-control-sm" id="filterDataInicio" />
                    </div>

                    <div class="filter-item">
                        <label class="form-label small">até:</label>
                        <input type="date" class="form-control form-control-sm" id="filterDataFim" />
                    </div>

                    <div class="filter-item">
                        <button type="button" class="btn btn-sm btn-primary" id="btnApplyFilters">
                            <i class="ti ti-filter"></i> Aplicar
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="btnClearFilters">
                            <i class="ti ti-filter-off"></i> Limpar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Container Principal da Tabela -->
<div class="container-fluid">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center gap-2">
                <i class="ti ti-@ViewBag.Icon"></i>
                <h5 class="card-title mb-0">@ViewBag.Title</h5>
            </div>

            <div class="d-flex gap-2">
                <button type="button" class="btn btn-sm btn-outline-secondary" id="btnToggleFilters">
                    <i class="ti ti-adjustments-horizontal"></i> Filtros
                </button>

                <button type="button" class="btn btn-sm btn-outline-primary" id="btnRefresh">
                    <i class="ti ti-refresh"></i> Atualizar
                </button>

                @if (ViewBag.HabilitaBtnExportar == true)
                {
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-sm btn-outline-success dropdown-toggle"
                                data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="ti ti-download"></i> Exportar
                        </button>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" href="#" id="btnExportExcel">
                                    <i class="ti ti-file-type-xls me-2"></i>Excel
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#" id="btnExportPDF">
                                    <i class="ti ti-file-type-pdf me-2"></i>PDF
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#" id="btnExportCSV">
                                    <i class="ti ti-file-type-csv me-2"></i>CSV
                                </a>
                            </li>
                        </ul>
                    </div>
                }
            </div>
        </div>

        <div class="card-body position-relative">
            <!-- Loading Overlay -->
            <div class="loading-overlay d-none" id="loadingOverlay">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                    <p class="mt-2 text-muted">Carregando dados...</p>
                </div>
            </div>

            <!-- Tabela Principal -->
            <div class="table-responsive">
                <table id="tblTsistema" class="table table-striped table-hover w-100">
                    <thead class="table-light">
                        <tr>
                            <th width="10%">Código</th>
                            <th>Descrição</th>
                            <th width="12%" class="text-center">Status</th>
                            <th width="120px" class="text-center">Ações</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <!-- Informações Adicionais -->
            <div class="row mt-3">
                <div class="col-md-6">
                    <small class="text-muted">
                        <i class="ti ti-info-circle me-1"></i>
                        Use Ctrl+N para novo registro, F5 para atualizar
                    </small>
                </div>
                <div class="col-md-6 text-end">
                    <small class="text-muted" id="tableInfo">
                        <!-- Será preenchido pelo JavaScript -->
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Formulários -->
<div class="modal fade" id="formModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="ti ti-edit me-2"></i>
                    <span>Formulário</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <!-- Conteúdo será carregado via AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Modal de Confirmação Global -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="ti ti-alert-triangle text-warning me-2"></i>
                    Confirmar Ação
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage">Tem certeza que deseja realizar esta ação?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmButton">Confirmar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- DataTables JavaScript -->
    <script src="https://cdn.datatables.net/1.13.8/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.8/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/responsive.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>

    <!-- CRUD Factory e Configuração -->
    <script type="module">
        import { createCrudPage } from "/js/crud/page-factory.js";
        import config from "/js/crud/pages/tsistema.config.js";

        // Inicializar CRUD quando DOM estiver pronto
        window.addEventListener('DOMContentLoaded', () => {
            try {
                // Criar instância do CRUD
                const crudInstance = createCrudPage(config);

                // Expor globalmente para depuração
                window.crudInstance = crudInstance;
                window.dataTable = crudInstance.dataTable;

                // Configurar eventos adicionais da interface
                setupUIEvents(crudInstance);

                console.log('CRUD inicializado com sucesso');
            } catch (error) {
                console.error('Erro ao inicializar CRUD:', error);
                alert('Erro ao carregar a página. Tente recarregar.');
            }
        });

        function setupUIEvents(crudInstance) {
            const { dataTable, refresh } = crudInstance;

            // Toggle de filtros
            document.getElementById('btnToggleFilters')?.addEventListener('click', () => {
                const filters = document.getElementById('customFilters');
                filters.classList.toggle('d-none');
            });

            // Refresh manual
            document.getElementById('btnRefresh')?.addEventListener('click', () => {
                showLoading(true);
                refresh();
                setTimeout(() => showLoading(false), 500);
            });

            // Aplicar filtros personalizados
            document.getElementById('btnApplyFilters')?.addEventListener('click', () => {
                applyCustomFilters(dataTable);
            });

            // Limpar filtros
            document.getElementById('btnClearFilters')?.addEventListener('click', () => {
                clearCustomFilters(dataTable);
            });

            // Exportações
            document.getElementById('btnExportExcel')?.addEventListener('click', () => {
                exportData('excel', dataTable);
            });

            document.getElementById('btnExportPDF')?.addEventListener('click', () => {
                exportData('pdf', dataTable);
            });

            document.getElementById('btnExportCSV')?.addEventListener('click', () => {
                exportData('csv', dataTable);
            });

            // Atualizar informações da tabela
            dataTable.on('draw', function() {
                updateTableInfo(dataTable);
            });

            // Configurar atalhos de teclado
            setupKeyboardShortcuts(crudInstance);
        }

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.classList.toggle('d-none', !show);
            }
        }

        function applyCustomFilters(dataTable) {
            const status = document.getElementById('filterStatus').value;
            const dataInicio = document.getElementById('filterDataInicio').value;
            const dataFim = document.getElementById('filterDataFim').value;

            // Aplicar filtro de status na coluna específica
            if (status) {
                dataTable.column(2).search(status === 'true' ? 'checked' : '(?!checked)', true, false);
            } else {
                dataTable.column(2).search('');
            }

            // Aplicar filtros de data (exemplo)
            if (dataInicio || dataFim) {
                // Implementar lógica de filtro por data conforme necessário
                console.log('Filtros de data:', { dataInicio, dataFim });
            }

            dataTable.draw();
        }

        function clearCustomFilters(dataTable) {
            document.getElementById('filterStatus').value = '';
            document.getElementById('filterDataInicio').value = '';
            document.getElementById('filterDataFim').value = '';

            dataTable.search('').columns().search('').draw();
        }

        function exportData(format, dataTable) {
            const data = dataTable.rows({ search: 'applied' }).data().toArray();

            // Implementar exportação conforme o formato
            switch(format) {
                case 'excel':
                    // Redirecionar para endpoint de exportação
                    window.location.href = '/SEG/Tsistema/Export?format=excel';
                    break;
                case 'pdf':
                    window.location.href = '/SEG/Tsistema/Export?format=pdf';
                    break;
                case 'csv':
                    window.location.href = '/SEG/Tsistema/Export?format=csv';
                    break;
            }
        }

        function updateTableInfo(dataTable) {
            const info = dataTable.page.info();
            const infoElement = document.getElementById('tableInfo');

            if (infoElement) {
                infoElement.textContent =
                    `Exibindo ${info.start + 1} a ${info.end} de ${info.recordsDisplay} registros` +
                    (info.recordsTotal !== info.recordsDisplay ? ` (filtrado de ${info.recordsTotal})` : '');
            }
        }

        function setupKeyboardShortcuts(crudInstance) {
            document.addEventListener('keydown', (e) => {
                // Ctrl + N = Novo
                if (e.ctrlKey && e.key === 'n') {
                    e.preventDefault();
                    document.querySelector('#BtnCreateNew')?.click();
                }

                // F5 = Refresh
                if (e.key === 'F5') {
                    e.preventDefault();
                    showLoading(true);
                    crudInstance.refresh();
                    setTimeout(() => showLoading(false), 500);
                }

                // Escape = Fechar modal
                if (e.key === 'Escape') {
                    const modals = document.querySelectorAll('.modal.show');
                    modals.forEach(modal => {
                        bootstrap.Modal.getInstance(modal)?.hide();
                    });
                }
            });
        }
    </script>

    <!-- Scripts de validação (se necessário) -->
    @await Html.PartialAsync("_ValidationScriptsPartial")
}