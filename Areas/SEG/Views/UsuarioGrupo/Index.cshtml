@{
    ViewData["Title"] = "Usuários";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card shadow-sm">
    <div class="card-header d-flex align-items-center justify-content-between">
        <h5 class="mb-0">Usuários</h5>
        <div class="d-flex gap-2">
            <a class="btn btn-primary" href="@Url.Action("Create", "Usuario", new { area = "SEG" })">
                <i class="fa-solid fa-plus me-1"></i>Novo
            </a>
        </div>
    </div>

    <div class="card-body">
        <div class="mb-3">
            <input id="usr-search" class="form-control" type="search" placeholder="Pesquisar..." />
        </div>

        <div class="table-responsive">
            <table id="grid-usuarios" class="table table-sm table-hover align-middle w-100">
                <thead>
                    <tr>
                        <th style="width:120px">Código</th>
                        <th>Nome</th>
                        <th>E-mail</th>
                        <th style="width:150px" class="text-center">Ações</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            // Endpoints (ajuste se o seu controller usar nomes diferentes)
            const urlGetData = '@Url.Action("GetData", "Usuario", new { area = "SEG" })';
            const urlEdit    = (id) => '@Url.Action("Edit", "Usuario", new { area = "SEG" })' + '/' + encodeURIComponent(id);
            const urlDetails = (id) => '@Url.Action("Details", "Usuario", new { area = "SEG" })' + '/' + encodeURIComponent(id);

            // Fallback se DTUtil.actions não existir: abre a rota do modal diretamente
            const gotoUserGroupsFallback = (id) => {
                const url = '@Url.Action("Modal", "UsuarioGrupo", new { area = "SEG" })' + '?cdUsuario=' + encodeURIComponent(id);
                // Se existir um #formModal na página, você pode carregar nele.
                // Aqui só navego como fallback (pag. própria do modal).
                window.location.href = url;
            };

            // Cria/atualiza DataTable
            const table = $('#grid-usuarios').DataTable({
                ajax: {
                    url: urlGetData,
                    dataSrc: function (json) {
                        // Espera { data: [...] }. Qualquer formato diferente, tente normalizar aqui.
                        return Array.isArray(json?.data) ? json.data : [];
                    }
                },
                processing: true,
                deferRender: true,
                lengthChange: true,
                pageLength: 25,
                order: [[0, 'asc']],
                columns: [
                    { data: 'cdusuario', width: 120 },
                    { data: 'dcusuario' },
                    { data: 'email_usuario' },
                    {
                        data: null,
                        orderable: false,
                        className: 'text-center',
                        render: function (data, type, row) {
                            const id   = row.cdusuario ?? row.Cdusuario ?? '';
                            const nome = (row.dcusuario ?? row.Dcusuario ?? '').toString();

                            return `
                              <div class="btn-group btn-group-sm" role="group">
                                <button type="button" class="btn btn-outline-primary js-grupos"
                                        title="Grupos do usuário"
                                        data-id="${id}" data-nome="${_.escape ? _.escape(nome) : nome}">
                                  <i class="fa-solid fa-layer-group"></i>
                                </button>
                                <a class="btn btn-outline-secondary" href="${urlDetails(id)}" title="Detalhes">
                                  <i class="fa-solid fa-list"></i>
                                </a>
                                <a class="btn btn-outline-success" href="${urlEdit(id)}" title="Editar">
                                  <i class="fa-solid fa-pen"></i>
                                </a>
                              </div>`;
                        }
                    }
                ],
                language: window.DT_LANG_PTBR || {} // mantém seu padrão de tradução se existir
            });

            // Busca rápida
            $('#usr-search').on('keyup change', function () {
                table.search(this.value).draw();
            });

            // Botão "Grupos" — dispara seu barramento de ações ou usa fallback
            $('#grid-usuarios').on('click', '.js-grupos', function () {
                const id   = this.dataset.id;
                const nome = this.dataset.nome || '';

                // 1) Com DTUtil (padrão já existente)
                if (window.DTUtil && DTUtil.actions && typeof DTUtil.actions.trigger === 'function') {
                    DTUtil.actions.trigger('Usuario', 'gotoUserGr', {
                        id: id,
                        // >>> evita "meta is not defined"
                        meta: { cdUsuario: id, nome: nome }
                    });
                    return;
                }

                // 2) Fallback (sem DTUtil/actions): navega para a rota do modal
                gotoUserGroupsFallback(id);
            });
        })();
    </script>
}
