@{
    ViewBag.Areas = "SEG";
    ViewBag.Views = "Constantes";
    ViewBag.Controller = "Constantes";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;

    ViewBag.Title = "Constantes";
    ViewBag.SubTitle = "Segurança";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

@section styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/v/bs5/dt-2.1.5/b-3.2.0/b-colvis-3.2.0/b-html5-3.2.0/b-print-3.2.0/r-3.0.3/cr-2.0.3/datatables.min.css" />
    <style>
        /* Tabela compacta */
        #tblSistemas thead th {
            font-family: "open sans","Helvetica Neue",Helvetica,Arial,sans-serif;
            font-size: 12px;
            font-weight: 600;
            color: #676a6c;
            vertical-align: middle;
            padding: 4px 8px !important;
            line-height: 1.1 !important;
            height: 32px !important;
        }

        #tblSistemas tbody td {
            padding: 6px 12px;
            vertical-align: middle;
            line-height: 1.2;
        }

        #tblSistemas .badge {
            font-size: 11px;
            padding: 4px 8px;
        }

        #tblSistemas .btn-group-sm .btn {
            padding: 4px 8px;
            font-size: 12px;
        }

        #tblSistemas .form-check {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #tblSistemas {
            font-size: 14px;
        }

        /* Toolbar: TUDO à direita, numa única linha */
        .toolbar-right {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            gap: 10px;
            flex-wrap: nowrap;
            width: 100%;
        }

        .search-fixed {
            width: clamp(260px,38vw,520px);
            position: relative;
        }

            .search-fixed .form-control {
                padding-right: 36px;
            }

        .search-clear-btn {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            width: 20px;
            height: 20px;
            display: none;
            z-index: 10;
        }

            .search-clear-btn.show {
                display: block;
            }

        .toolbar-right .btn {
            white-space: nowrap;
        }

        /* Favorito */
        .btn-fav {
            transition: background-color .2s,color .2s,box-shadow .2s;
        }

            .btn-fav.btn-warning, .btn-fav.btn-warning .fa-star {
                color: #fff !important;
            }

        @@keyframes pulse {
            0% {
                transform: scale(1)
            }

            50% {
                transform: scale(1.15)
            }

            100% {
                transform: scale(1)
            }
        }

        .pulse-animation {
            animation: pulse .3s ease-out;
        }

        /* Paginação à direita */
        div.dataTables_paginate {
            text-align: right !important;
        }

        .dataTables_paginate .pagination {
            justify-content: flex-end !important;
        }

        /* Marcador de ColReorder */
        .dt-colreorder-marker {
            background: #3a3f52 !important;
            border: 1px dashed #5c6178 !important;
            box-shadow: 0 0 10px rgba(0,0,0,.5);
        }

        /* Resize de colunas (colResizable) */
        #tblSistemas {
            table-layout: auto;
        }

            #tblSistemas th, #tblSistemas td {
                overflow: hidden;
            }

        #tblSistemas_wrapper {
            position: relative;
        }

        .JCLRgrips {
            z-index: 3;
        }

        .JCLRgrip {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 8px;
            cursor: col-resize;
        }

            .JCLRgrip .JColResizer {
                position: absolute;
                right: -2px;
                top: 0;
                bottom: 0;
                width: 4px;
                border-right: 2px solid rgba(13,110,253,.25);
            }

            .JCLRgrip.dragging .JColResizer {
                border-right-color: rgba(13,110,253,.6);
            }
    </style>

    <style>
        /* ...suas regras que já existem... */

        /* Força o estilo “soft” no botão colvis (normal/hover/focus/active) */
        #columnButtons .dt-button.btn-soft-primary,
        #columnButtons .dt-button.btn-soft-primary:hover,
        #columnButtons .dt-button.btn-soft-primary:focus,
        #columnButtons .dt-button.btn-soft-primary:active,
        #columnButtons .dt-button.btn-soft-primary.active {
            background-color: var(--bs-primary-bg-subtle) !important;
            border-color: var(--bs-primary-border-subtle) !important;
            color: var(--bs-primary) !important;
            box-shadow: none !important;
        }

            /* Setinha do dropdown acompanha a cor do texto */
            #columnButtons .dt-button.btn-soft-primary .dt-down-arrow {
                border-top-color: currentColor !important;
            }
    </style>
}

@await Html.PartialAsync("~/Views/Shared/Partials/_ToastContainer.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }


<!-- Body Begin  -->
<div class="row mb-2">
    <div class="col-lg-12">
        <form class="bg-light-subtle rounded border p-2">
            <!-- // #001 //-->
            <div class="card-body mb-2"></div>

            <table id="tblGrid" class="table table-striped table-bordered w-100">
                <thead>
                    <tr>
                        <th class="dt-check">
                            <div class="form-check m-0">
                                <input class="form-check-input" type="checkbox" id="checkAll" title="Selecionar todos">
                            </div>
                        </th>
                        <th>Código</th>
                        <th>Descrição</th>
                        <th>Conteúdo</th>
                        <th>Tipo Campo</th>
                        <th>Alterar</th>
                        <th>Sistema</th>
                        <th>Função</th>
                        <th>Tipo Valor</th>
                        <th>Config</th>
                        <th class="dt-actions">Ações</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>


            <!-- // #001 //-->
        </form>
    </div>
</div>
<!-- Body End  -->


<!-- Group Form Begin  -->
<form id="__ajaxAntiForgery" class="d-none">
    @Html.AntiForgeryToken()
</form>

<!-- Group Form End  -->


@section scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.datatables.net/v/bs5/dt-2.1.5/r-3.0.3/datatables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.print.min.js"></script>
    <script src="~/js/confirm-modal.js" asp-append-version="true"></script>

    <script>
        (function () {
            const TABLE_ID = 'tblGrid';
            const $tbl = $('#' + TABLE_ID);

            const routes = {
                get: '@Url.Action("GetData", "Constantes", new { area = "SEG" })',
                create: '@Url.Action("Create", "Constantes", new { area = "SEG" })',
                edit: '@Url.Action("Edit", "Constantes", new { area = "SEG" })',
                deleteBase: '@Url.Action("Delete", "Constantes", new { area = "SEG" })',
                deleteByToken: '@Url.Action("DeleteByToken", "Constantes", new { area = "SEG" })'
            };

            function anti() {
                return document.querySelector('#__ajaxAntiForgery input[name="__RequestVerificationToken"]')?.value
                    || document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            }

            function toastOk(m){ window.showToast?.({ title:'Sucesso', message:m, variant:'success'}); }
            function toastErr(m){ window.showToast?.({ title:'Erro', message:m||'Falha.', variant:'danger'}); }
            function toastWarn(m){ window.showToast?.({ title:'Atenção', message:m, variant:'warning'}); }

            const $search = $('#tableSearch'), $clear = $('#clearSearch');
            $search.on('input', function(){ $clear.toggleClass('show', this.value.length>0); if(window.dataTable) window.dataTable.search(this.value).draw(); });
            $clear.on('click', function(){ $search.val('').trigger('input'); $search.focus(); });

            const dt = $tbl.DataTable({
                processing: true,
                serverSide: false,
                responsive: true,
                stateSave: true,
                stateDuration: -1,
                autoWidth: false,

                dom: 'Brt<"row mt-2"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                buttons: ['excelHtml5','csvHtml5','pdfHtml5','print'],

                ajax: {
                    url: routes.get,
                    type:'GET',
                    cache:false,
                    dataSrc: function (json) {
                        if (json?.error) {
                            toastErr(json.error);
                            return [];
                        }
                        return Array.isArray(json) ? json : (json.data || []);
                    }
                },

                columns: [
                    {
                        data: null,
                        orderable:false,
                        searchable:false,
                        className:'dt-check',
                        render: function (_d,_t,row) {
                            const key = (row.cdconstante || '').trim();
                            const token = (row.deleteToken || '').trim();
                            return `<div class="form-check m-0">
                                      <input class="form-check-input row-check" type="checkbox"
                                             value="${key}" data-token="${token}">
                                    </div>`;
                        }
                    },
                    {
                        data: 'cdconstante',
                        render: function(v){
                            const id = encodeURIComponent((v||'').trim());
                            return `<a href="${routes.edit}?id=${id}" title="Editar">${(v||'')}</a>`;
                        }
                    },
                    { data: 'dcconstante' },
                    { data: 'dcconteudo' },
                    { data: 'tpcampo', render:(v)=>(v||'').toString().toUpperCase() },
                    { data: 'flalterar', render:(v)=>(v||'').toString().toUpperCase() },
                    { data: 'cdsistema' },
                    { data: 'cdfuncao' },
                    { data: 'tipo', render:(v)=>(v||'').toString().toUpperCase() },
                    { data: 'config', orderable:false, render:(v)=>`<span class="badge ${v?'badge-yes':'badge-no'}">${v?'Sim':'Não'}</span>` },
                    {
                        data:null,
                        orderable:false,
                        searchable:false,
                        className:'dt-actions',
                        render:function(row){
                            const key = encodeURIComponent((row.cdconstante||'').trim());
                            const token = (row.deleteToken || '').trim();
                            const editHref = `${routes.edit}?id=${key}`;
                            const delHref  = `${routes.deleteBase}?id=${key}`;
                            return `<div class="btn-group btn-group-sm" role="group">
                                      <a class="btn btn-success" href="${editHref}" title="Editar"><i class="fa fa-pen"></i></a>
                                      <a class="btn btn-danger js-del-one" href="${delHref}" data-token="${token}" title="Excluir"><i class="fa fa-trash"></i></a>
                                    </div>`;
                        }
                    }
                ],
                order: [[1,'asc']],
                columnDefs: [
                    { targets:0, width:46, responsivePriority:1 },
                    { targets:-1, width:140, responsivePriority:1 }
                ],
                language: { url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/pt-BR.json' },

                initComplete: function(){
                    const api = this.api();
                    window.dataTable = api;

                    $('#exportExcel').on('click', ()=>api.button('.buttons-excel').trigger());
                    $('#exportCsv').on('click',   ()=>api.button('.buttons-csv').trigger());
                    $('#exportPdf').on('click',   ()=>api.button('.buttons-pdf').trigger());
                    $('#exportPrint').on('click', ()=>api.button('.buttons-print').trigger());

                    $('#checkAll').on('change', function(){
                        const checked = this.checked;
                        $('#' + TABLE_ID + ' tbody .row-check').prop('checked', checked);
                    });
                    api.on('draw', function(){ $('#checkAll').prop('checked', false); });

                    $('#btnNovo').off('click').on('click', function(e){
                        e.preventDefault();
                        location.href = routes.create;
                    });
                }
            });

            $(document).on('click', `#${TABLE_ID} .js-del-one`, async function(e){
                e.preventDefault();
                e.stopPropagation();
                const $btn = $(this);
                const href = this.href || '';
                const token = ($btn.data('token') || '').toString().trim();

                let id = '';
                const m = href.match(/id=([^&]+)/i);
                if (m) id = decodeURIComponent(m[1]);

                try{
                    if (window.confirmModal){
                        await window.confirmModal({
                            title:'Excluir registro',
                            message:`Confirma excluir <strong>${(id||'este registro')}</strong>?`,
                            okText:'Excluir',
                            okClass:'btn-danger'
                        });
                    } else if (!window.confirm(`Excluir ${id || 'este registro'}?`)) {
                        return;
                    }
                }catch{ return; }

                const prev = $btn.html();
                $btn.addClass('disabled').attr('aria-disabled','true').css('pointer-events','none')
                    .html('<i class="fa fa-spinner fa-spin"></i>');

                try{
                    let res;
                    if (token) {
                        res = await fetch(routes.deleteByToken, {
                            method:'POST',
                            credentials:'same-origin',
                            headers:{
                                'Content-Type':'application/json; charset=utf-8',
                                'X-Requested-With':'XMLHttpRequest',
                                'RequestVerificationToken': anti()
                            },
                            body: JSON.stringify({ token })
                        });
                    } else {
                        res = await fetch(href, {
                            method:'POST',
                            credentials:'same-origin',
                            headers:{
                                'Content-Type':'application/json',
                                'X-Requested-With':'XMLHttpRequest',
                                'RequestVerificationToken': anti()
                            }
                        });
                    }

                    if(!res.ok){
                        const msg = (await res.text()) || `Falha ao excluir (HTTP ${res.status}).`;
                        if (res.status === 409) { throw new Error(msg); }
                        throw new Error(msg);
                    }
                    $('#'+TABLE_ID).DataTable().ajax.reload(null, false);
                    toastOk('Registro excluído com sucesso.');
                }catch(err){
                    toastErr(err?.message || 'Erro ao excluir.');
                }
                finally{
                    $btn.removeClass('disabled').removeAttr('aria-disabled')
                        .css('pointer-events','').html(prev);
                }
            });

            $('#btnExcluirSelecionados').on('click', async function(e){
                e.preventDefault();
                const api = $('#'+TABLE_ID).DataTable();
                const nodes = api.rows({ page:'current' }).nodes();
                const els = $(nodes).find('.row-check:checked').get();
                if(!els.length){
                    toastWarn('Selecione ao menos um registro.');
                    return;
                }

                try{
                    if (window.confirmModal){
                        await window.confirmModal({
                            title:'Excluir selecionados',
                            message:`Você está prestes a excluir <b>${els.length}</b> registro(s). Deseja continuar?`,
                            okText:'Excluir',
                            cancelText:'Cancelar',
                            okClass:'btn-danger'
                        });
                    } else if (!window.confirm(`Excluir ${els.length} registro(s)?`)) {
                        return;
                    }
                }catch{ return; }

                const tokenAf = anti();
                let ok=0, fail=0, lastError='';

                for (const el of els){
                    const id = (el.value || '').trim();
                    const token = (el.dataset.token || '').trim();

                    try{
                        let res;
                        if (token) {
                            res = await fetch(routes.deleteByToken, {
                                method:'POST',
                                credentials:'same-origin',
                                headers:{
                                    'Content-Type':'application/json; charset=utf-8',
                                    'X-Requested-With':'XMLHttpRequest',
                                    'RequestVerificationToken': tokenAf
                                },
                                body: JSON.stringify({ token })
                            });
                        } else {
                            res = await fetch(`${routes.deleteBase}?id=${encodeURIComponent(id)}`, {
                                method:'POST',
                                credentials:'same-origin',
                                headers:{
                                    'Content-Type':'application/json',
                                    'X-Requested-With':'XMLHttpRequest',
                                    'RequestVerificationToken': tokenAf
                                }
                            });
                        }

                        if(!res.ok){
                            let body='';
                            try{ body = await res.text(); }catch{}
                            if(res.status===409){ body = body || 'Não é possível excluir: há dependências.'; }
                            fail++;
                            lastError = body || `HTTP ${res.status}`;
                        } else {
                            ok++;
                        }
                    }catch(err){
                        fail++;
                        lastError = err?.message || 'Erro desconhecido';
                    }
                }

                const master = document.getElementById('checkAll');
                if(master){ master.checked=false; master.indeterminate=false; }
                api.ajax.reload(null, false);

                if(fail===0)      toastOk(`${ok} registro(s) excluído(s) com sucesso.`);
                else if(ok===0)   toastErr(`Nenhum registro excluído. ${lastError||''}`.trim());
                else              toastWarn(`Excluídos: ${ok} • Falharam: ${fail}${lastError ? ' — '+lastError : ''}`);
            });
        })();
    </script>

    <script>
        window.showToast = function({ title='Aviso', message='', variant='info', delay=3500 } = {}) {
            const el = document.getElementById('layoutToast');
            if (!el || !window.bootstrap) { alert(message || title); return; }
            const header = el.querySelector('.toast-header');
            const titleEl = el.querySelector('.toast-header .me-auto');
            const bodyEl  = el.querySelector('.toast-body');
            if (titleEl) titleEl.textContent = title;
            if (bodyEl)  bodyEl.textContent  = message;
            header.classList.remove('bg-success','bg-danger','bg-warning','bg-info','text-white');
            const map = { success:'bg-success', danger:'bg-danger', warning:'bg-warning', info:'bg-info' };
            if (map[variant]) header.classList.add(map[variant], 'text-white');
            bootstrap.Toast.getOrCreateInstance(el, { autohide:true, delay }).show();
        };
    </script>

    <script src="~/js/DataHora.js" asp-append-version="true"></script>
}