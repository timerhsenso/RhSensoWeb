@using System.Text.Json
@using RhSensoWeb.Helpers

@{
    ViewBag.Areas = "SEG";
    ViewBag.Views = "Constantes";
    ViewBag.Controller = "Constantes";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    ViewBag.gridName = "#gridConstantes";
    ViewBag.Title = "Tabela de Constantes";
    ViewBag.SubTitle = "Segurança";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

@{
    // Permissões desta tela
    var acts = PermissionAccessHelper.GetActions(Context, "SEG", "SEG_FM_CONSTANTES");
    ViewBag.iHabilitaBtnNovo = acts.Contains("I");
    ViewBag.iCanDelete = acts.Contains("E");
    ViewBag.iCanEdit = acts.Contains("A");
    ViewBag.iCanExport = acts.Contains("C");
}

@{
    var icreateGet = Url.Action("Create", "Constantes", new { area = "SEG" });
    var icreatePost = icreateGet;

    ViewBag.aHref = icreateGet;
    ViewBag.dataContext = "Constantes";
    ViewBag.dataTable = "#gridConstantes";
    ViewBag.dataUseModal = true;
    ViewBag.dataTitle = "Nova Constante";
    ViewBag.dataCreateGet = icreateGet;
    ViewBag.dataCreatePost = icreatePost;
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")
@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<div class="card shadow-sm">
    <div class="card-body">
        <!-- WRAPPER anti-estouro -->
        <div class="table-wrap">
            <table id="gridConstantes" class="table table-striped table-hover w-100"></table>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Scroll horizontal dentro do próprio grid (independente do DTUtil) */
        .table-wrap {
            max-width: 100%;
            overflow-x: auto;
        }

            .table-wrap table {
                width: 100%;
                table-layout: auto;
            }

        /* Se o DTUtil passar scrollX, mantém o comportamento */
        .dataTables_wrapper .dataTables_scroll {
            overflow-x: auto;
        }

        .dataTables_wrapper .dataTables_scrollHead,
        .dataTables_wrapper .dataTables_scrollBody {
            width: 100% !important;
        }

        /* Quebra/não quebra de texto */
        .dt-wrap {
            white-space: normal !important;
            word-break: break-word;
        }

        .dt-nowrap {
            white-space: nowrap !important;
        }
    </style>
}

@section Scripts {
    <script>
        $(function () {
          const gridSelector = '@(ViewBag.gridName ?? "#gridConstantes")';

          DTUtil.createAjaxDataTable({
            table: gridSelector,
            context: 'Constantes',
            useModal: true,
            rowId: 'cdconstante',
            tokenField: 'deleteToken',
            exportName: 'Constantes',

            routes: {
              list:       '/SEG/Constantes/GetData',
              editGet:    '/SEG/Constantes/Edit/{id}',
              editPost:   '/SEG/Constantes/Edit/{id}',
              deletePost: '/SEG/Constantes/DeleteByToken'
            },

            fields: [
              { data:'cdconstante', title:'Código',    width:'140px', className:'dt-nowrap' },
              { data:'dcconstante', title:'Constante',                 className:'dt-wrap'   },
              { data:'dcconteudo',  title:'Conteúdo', defaultContent:'', className:'dt-wrap' },

              { data:'tpcampo',   title:'Tipo Campo',   defaultContent:'', visible:false },
              { data:'flalterar', title:'Pode Alterar', defaultContent:'', visible:false },
              { data:'cdsistema', title:'Sistema',      defaultContent:'', visible:false },
              { data:'cdfuncao',  title:'Função',       defaultContent:'', visible:false },
              { data:'tipo',      title:'Tipo',         defaultContent:'', visible:false },
              { data:'config',    title:'Config.',      defaultContent:'', visible:false }
            ],

            actions: [
              { name:'edit',   icon:'fa-pen',   class:'btn-outline-primary', title:'Editar' },
              { name:'delete', icon:'fa-trash', class:'btn-outline-danger',  title:'Excluir' }
            ],

            dtOptions: {
              ajax: { dataSrc: '' },
              dom: 'Bfrtip',
              buttons: [
                { extend:'colvis',     text:'<i class="fa-solid fa-table-columns"></i> Colunas' },
                { extend:'excelHtml5', title:'Constantes' },
                { extend:'pdfHtml5',   title:'Constantes' },
                { extend:'print',      title:'Constantes' }
              ],
              // Anti-estouro (se o DTUtil repassar)
              scrollX: true,
              scrollCollapse: true,
              autoWidth: false,
              responsive: false,

              colReorder: true,
              order: [[0,'asc']]
            }
          });

          // Refresca hide e ajusta larguras no primeiro draw
          $(gridSelector).on('init.dt', function (e, settings) {
            const api = new $.fn.dataTable.Api(settings);
            api.columns([3,4,5,6,7,8]).visible(false, false);
            api.columns.adjust().draw(false);
          });

          // Ajuste em resize
          $(window).on('resize.dt-constantes', function () {
            if ($.fn.dataTable.isDataTable(gridSelector)) {
              $(gridSelector).DataTable().columns.adjust();
            }
          });

          // Delete por token
          DTUtil.actions.on('Constantes', 'delete', async ({ id, meta, dt, button }) => {
            const row   = dt.row($(button).closest('tr')).data() || {};
            const token = row?.[meta.tokenField];
            if (!token) return (window.AppNotifier ? AppNotifier.warn('Token ausente para exclusão.') : alert('Token ausente para exclusão.'));

            const ok = window.AppModal?.confirm
              ? await AppModal.confirm('Excluir este registro?')
              : confirm('Excluir este registro?');
            if (!ok) return;

            $.ajax({
              url: meta.routes.deletePost,
              type: 'POST',
              contentType: 'application/json; charset=UTF-8',
              data: JSON.stringify({ Token: token })
            })
            .done(() => {
              window.AppNotifier && AppNotifier.success('Excluído com sucesso.');
              dt.ajax.reload(null, false);
            })
            .fail(xhr => (window.AppAjax ? AppAjax.handleError(xhr) : alert('Erro ao excluir.')));
          });

          DTUtil.bindInputSearch('#searchGrid', gridSelector);
          DTUtil.bindClearSearch('#btnLimpaPesquisa', '#searchGrid', gridSelector, { reload:true, resetPaging:true });
        });
    </script>
}
