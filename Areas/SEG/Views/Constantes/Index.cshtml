@using System.Text.Json
@using RhSensoWeb.Helpers

@{
    ViewBag.Areas = "SEG";
    ViewBag.Views = "Constantes";
    ViewBag.Controller = "Constantes";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    ViewBag.gridName = "#gridConstantes";
    ViewBag.Title = "Tabela de Constantes";
    ViewBag.SubTitle = "Segurança";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";

    //
}


@{
    var acts = PermissionAccessHelper.GetActions(Context, "SEG", "SEG_FM_TSISTEMA");
    ViewBag.iHabilitaBtnNovo = acts.Contains("I");
    ViewBag.iCanDelete = acts.Contains("E");
    ViewBag.iCanEdit = acts.Contains("A");
    ViewBag.iCanExport = acts.Contains("C");
    // ViewBag.HabilitaBtnExportar = acts.Contains("C");

    var perms = new
    {
        canDelete = acts.Contains("E"),
        canEdit = acts.Contains("A")
    };

}


@{
    // URLs da action Create
    var icreateGet = Url.Action("Create", "Constantes", new { area = "SEG" });
    var icreatePost = icreateGet; // se o POST for a mesma rota, reaproveite

    // Parâmetros para o _TopbarSharedGrid
    ViewBag.aHref = icreateGet;            // fallback de navegação
    ViewBag.dataContext = "Constantes";           // mesmo "context" do DTUtil.createAjaxDataTable
    ViewBag.dataTable = "#gridConstantes";      // seletor do DataTable para dar reload após salvar
    ViewBag.dataUseModal = true;                 // true = abrir no modal; false = navegar
    ViewBag.dataTitle = "Nova Constante";       // título do modal
    ViewBag.dataCreateGet = icreateGet;            // GET que renderiza o formulário (partial quando AJAX)
    ViewBag.dataCreatePost = icreatePost;           // POST que grava
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<div class="card shadow-sm">
    <div class="card-body">
        <table id="gridConstantes" class="table table-striped table-hover w-100"></table>
    </div>
</div>

@* Observação:
   Os partials de modal (_FormModal.cshtml e _ConfirmModal.cshtml) devem estar inclusos UMA VEZ no layout (_VerticalLayout),
   antes dos scripts do rodapé. Se não estiverem, o DTUtil cai em fallback de navegação (sem modal). *@

@section scripts {
    @* <-- minúsculo *@
    <script>
        $(function () {
          const gridSelector = '@(ViewBag.gridName ?? "#gridConstantes")';

          DTUtil.createAjaxDataTable({
            table: gridSelector,
            context: 'Constantes',
            useModal: true,
            rowId: 'cdconstante',
            tokenField: 'deleteToken',
            exportName: 'Constantes',

            // rotas
            routes: {
              list:            '/SEG/Constantes/GetData',
              editGet:         '/SEG/Constantes/Edit/{id}',
              editPost:        '/SEG/Constantes/Edit/{id}',
              deletePost:      '/SEG/Constantes/DeleteByToken'
            },

            // colunas declarativas (caso o DTUtil repasse "visible", ótimo; se não,
            // o bloco init.dt abaixo garante o hide)
            fields: [
              { data: 'cdconstante', title: 'Código',   width: '140px' },
              { data: 'dcconstante', title: 'Constante' },
              { data: 'dcconteudo',  title: 'Conteúdo', defaultContent: '' },

              { data: 'tpcampo',   title: 'Tipo Campo',   defaultContent: '', visible: false },
              { data: 'flalterar', title: 'Pode Alterar', defaultContent: '', visible: false },
              { data: 'cdsistema', title: 'Sistema',      defaultContent: '', visible: false },
              { data: 'cdfuncao',  title: 'Função',       defaultContent: '', visible: false },
              { data: 'tipo',      title: 'Tipo',         defaultContent: '', visible: false },
              { data: 'config',    title: 'Config.',      defaultContent: '', visible: false }
            ],

            actions: [
              { name: 'edit',   icon: 'fa-pen',   class: 'btn-outline-primary', title: 'Editar'  },
              { name: 'delete', icon: 'fa-trash', class: 'btn-outline-danger',  title: 'Excluir' }
            ],

            // Se o DTUtil repassa dtOptions.ajax, isso resolve o array na raiz:
            dtOptions: {
              ajax: { dataSrc: '' },   // <--- importante p/ Json(data) vs {data:[...]}
              dom: 'Bfrtip',
              buttons: [
                { extend: 'colvis', text: '<i class="fa-solid fa-table-columns"></i> Colunas' },
                { extend: 'excelHtml5', title: 'Constantes' },
                { extend: 'pdfHtml5',   title: 'Constantes' },
                { extend: 'print',      title: 'Constantes' }
              ],
              responsive: true,
              colReorder: true,
              order: [[0, 'asc']]
            }
          });

          // Garante esconder as colunas 3..8 mesmo se o DTUtil não aplicar "visible:false"
          $(gridSelector).on('init.dt', function (e, settings) {
            const api = new $.fn.dataTable.Api(settings);
            api.columns([3,4,5,6,7,8]).visible(false, false); // sem redesenhar
            api.columns.adjust().draw(false);
          });

          // Delete com token (mantém seu fluxo)
          DTUtil.actions.on('Constantes', 'delete', async ({ id, meta, dt, button }) => {
            const row   = dt.row($(button).closest('tr')).data() || {};
            const token = row?.[meta.tokenField];
            if (!token) return (window.AppNotifier ? AppNotifier.warn('Token ausente para exclusão.') : alert('Token ausente para exclusão.'));
            const ok = window.AppModal?.confirm ? await AppModal.confirm('Excluir este registro?') : confirm('Excluir este registro?');
            if (!ok) return;

            $.ajax({
              url: meta.routes.deletePost,
              type: 'POST',
              contentType: 'application/json; charset=UTF-8',
              data: JSON.stringify({ Token: token })
            }).done(() => {
              window.AppNotifier && AppNotifier.success('Excluído com sucesso.');
              dt.ajax.reload(null, false);
            }).fail(xhr => (window.AppAjax ? AppAjax.handleError(xhr) : alert('Erro ao excluir.')));
          });

          DTUtil.bindInputSearch('#searchGrid', '#gridConstantes');
          DTUtil.bindClearSearch('#btnLimpaPesquisa', '#searchGrid', '#gridConstantes', { reload: true, resetPaging: true });
        });
    </script>
    

}

