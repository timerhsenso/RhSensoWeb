@{
    ViewBag.Areas = "SEG";
    ViewBag.Views = "FuncoesSistema";
    ViewBag.Controller = "FuncoesSistema";
    ViewBag.HabilitaBtnNovo = true;       // o seu TopBar usa isso
    ViewBag.HabilitaBtnExportar = true;

    ViewBag.Title = "Funções do Sistema";
    ViewBag.SubTitle = "Segurança";
    ViewBag.Icon = "users-round"; // ícone desejado
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

@section styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/v/bs5/dt-2.1.5/b-3.2.0/b-colvis-3.2.0/b-html5-3.2.0/b-print-3.2.0/r-3.0.3/cr-2.0.3/datatables.min.css" />
    <style>
        /* Tabela compacta */
        #tblSistemas thead th {
            font-family: "open sans","Helvetica Neue",Helvetica,Arial,sans-serif;
            font-size: 12px;
            font-weight: 600;
            color: #676a6c;
            vertical-align: middle;
            padding: 4px 8px !important;
            line-height: 1.1 !important;
            height: 32px !important;
        }

        #tblSistemas tbody td {
            padding: 6px 12px;
            vertical-align: middle;
            line-height: 1.2;
        }

        #tblSistemas .badge {
            font-size: 11px;
            padding: 4px 8px;
        }

        #tblSistemas .btn-group-sm .btn {
            padding: 4px 8px;
            font-size: 12px;
        }

        #tblSistemas .form-check {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #tblSistemas {
            font-size: 14px;
        }

        /* Toolbar: TUDO à direita, numa única linha */
        .toolbar-right {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            gap: 10px;
            flex-wrap: nowrap;
            width: 100%;
        }

        .search-fixed {
            width: clamp(260px,38vw,520px);
            position: relative;
        }

            .search-fixed .form-control {
                padding-right: 36px;
            }

        .search-clear-btn {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            width: 20px;
            height: 20px;
            display: none;
            z-index: 10;
        }

            .search-clear-btn.show {
                display: block;
            }

        .toolbar-right .btn {
            white-space: nowrap;
        }

        /* Favorito */
        .btn-fav {
            transition: background-color .2s,color .2s,box-shadow .2s;
        }

            .btn-fav.btn-warning, .btn-fav.btn-warning .fa-star {
                color: #fff !important;
            }

        @@keyframes pulse {
            0% {
                transform: scale(1)
            }

            50% {
                transform: scale(1.15)
            }

            100% {
                transform: scale(1)
            }
        }

        .pulse-animation {
            animation: pulse .3s ease-out;
        }

        /* Paginação à direita */
        div.dataTables_paginate {
            text-align: right !important;
        }

        .dataTables_paginate .pagination {
            justify-content: flex-end !important;
        }

        /* Marcador de ColReorder */
        .dt-colreorder-marker {
            background: #3a3f52 !important;
            border: 1px dashed #5c6178 !important;
            box-shadow: 0 0 10px rgba(0,0,0,.5);
        }

        /* Resize de colunas (colResizable) */
        #tblSistemas {
            table-layout: auto;
        }

            #tblSistemas th, #tblSistemas td {
                overflow: hidden;
            }

        #tblSistemas_wrapper {
            position: relative;
        }

        .JCLRgrips {
            z-index: 3;
        }

        .JCLRgrip {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 8px;
            cursor: col-resize;
        }

            .JCLRgrip .JColResizer {
                position: absolute;
                right: -2px;
                top: 0;
                bottom: 0;
                width: 4px;
                border-right: 2px solid rgba(13,110,253,.25);
            }

            .JCLRgrip.dragging .JColResizer {
                border-right-color: rgba(13,110,253,.6);
            }
    </style>

    <style>
        /* ...suas regras que já existem... */

        /* Força o estilo “soft” no botão colvis (normal/hover/focus/active) */
        #columnButtons .dt-button.btn-soft-primary,
        #columnButtons .dt-button.btn-soft-primary:hover,
        #columnButtons .dt-button.btn-soft-primary:focus,
        #columnButtons .dt-button.btn-soft-primary:active,
        #columnButtons .dt-button.btn-soft-primary.active {
            background-color: var(--bs-primary-bg-subtle) !important;
            border-color: var(--bs-primary-border-subtle) !important;
            color: var(--bs-primary) !important;
            box-shadow: none !important;
        }

            /* Setinha do dropdown acompanha a cor do texto */
            #columnButtons .dt-button.btn-soft-primary .dt-down-arrow {
                border-top-color: currentColor !important;
            }
    </style>

}

<!-- Container Toast de Alerta -->
@await Html.PartialAsync("~/Views/Shared/Partials/_ToastContainer.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")

@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<!-- Body Begin  -->
<div class="row mb-2">
    <div class="col-lg-12">
        <form class="bg-light-subtle rounded border p-2">
            <!-- // #001 //-->
            <div class="card-body mb-2"></div>

            <table id="tblFuncoes" class="table table-striped table-bordered w-100">
                <thead>
                    <tr>
                        <th class="dt-check">
                            <div class="form-check m-0">
                                <input class="form-check-input" type="checkbox" id="checkAll" title="Selecionar todos">
                            </div>
                        </th>
                        <th>Sistema</th>
                        <th>Função</th>
                        <th>Descrição da Função</th>
                        <th>Módulo</th>
                        <th>Descrição do Módulo</th>
                        <th class="dt-actions">Ações</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>


            <!-- // #001 //-->
        </form>
    </div>
</div>
<!-- Body End  -->


<!-- AntiForgery para AJAX -->
<form id="__ajaxAntiForgery" class="d-none">
    @Html.AntiForgeryToken()
</form>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

    <!-- DataTables 2 + Buttons + Responsive -->
    <script src="https://cdn.datatables.net/v/bs5/dt-2.1.5/b-3.2.0/r-3.0.3/datatables.min.js"></script>
    <!-- Dependências de export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>

    <!-- Modal de confirmação (seu helper) -->
    <script src="~/js/confirm-modal.js" asp-append-version="true"></script>

    <script>
        (function () {
            // Rotas usadas no DataTable
            const routes = {
                get: '@Url.Action("GetData", "FuncoesSistema", new { area = "SEG" })',
                edit: '@Url.Action("Edit", "FuncoesSistema", new { area = "SEG" })',
                del: '@Url.Action("Delete", "FuncoesSistema", new { area = "SEG" })',
                delByToken: '@Url.Action("DeleteByToken", "FuncoesSistema", new { area = "SEG" })'
            };

            // Token AntiForgery
            function anti() {
                return document.querySelector('#__ajaxAntiForgery input[name="__RequestVerificationToken"]')?.value || '';
            }

            // Busca externa (parcial _TopBarShearhGrid)
            const searchInput = $('#tableSearch');
            const clearBtn = $('#clearSearch');
            searchInput.on('input', function () {
                clearBtn.toggleClass('show', this.value.length > 0);
                if (window.dataTable) window.dataTable.search(this.value).draw();
            });
            clearBtn.on('click', function () {
                searchInput.val('').trigger('input'); searchInput.focus();
            });

            // Inicializa DataTable
            const tbl = $('#tblFuncoes');
            const dt = tbl.DataTable({
                processing: true,
                serverSide: false,
                responsive: true,
                stateSave: true,
                stateDuration: -1,
                autoWidth: false,

                // mostra apenas tabela / i / paginação (sem length/filter nativos)
                dom: 'rt<"row mt-2"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',

                // cria botões internos (acionaremos por botões externos do TopBar)
                layout: { topStart: { buttons: ['excelHtml5', 'csvHtml5', 'pdfHtml5', 'print'] } },

                ajax: {
                    url: routes.get,
                    type: 'GET',
                    cache: false,
                    dataSrc: function (json) {
                        if (json?.error) {
                            window.showToast?.({ title: 'Erro', message: 'Falha ao carregar dados.', variant: 'danger' });
                            return [];
                        }
                        return Array.isArray(json) ? json : (json.data || []);
                    }
                },

                columns: [
                    {   // checkbox
                        data: null, orderable: false, searchable: false, className: 'dt-check',
                        render: function (_d, _t, row) {
                            const s = (row.cdsistema || '').trim();
                            const f = (row.cdfuncao || '').trim();
                            return `<div class="form-check m-0">
                                        <input class="form-check-input row-check" type="checkbox" value="${s}|${f}">
                                    </div>`;
                        }
                    },
                    { data: 'cdsistema' },
                    { data: 'cdfuncao' },
                    { data: 'dcfuncao' },
                    { data: 'dcmodulo' },
                    { data: 'descricaomodulo' },
                    {   // ações
                        data: null, orderable: false, searchable: false, className: 'dt-actions',
                        render: function (row) {
                            const s = encodeURIComponent((row.cdsistema || '').trim());
                            const f = encodeURIComponent((row.cdfuncao  || '').trim());
                            const token = row?.deleteToken || '';
                            const editHref = `${routes.edit}?cdsistema=${s}&cdfuncao=${f}`;
                            const delHref  = `${routes.del}?cdsistema=${s}&cdfuncao=${f}`;

                            return `<div class="btn-group btn-group-sm" role="group">
                                        <a class="btn btn-success" href="${editHref}" title="Editar"><i class="fa fa-pen"></i></a>
                                        <a class="btn btn-danger js-del-one" href="${delHref}" data-token="${token}" title="Excluir"><i class="fa fa-trash"></i></a>
                                    </div>`;
                        }
                    }
                ],

                order: [[1, 'asc'], [2, 'asc']], // cdsistema, cdfuncao

                language: { url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/pt-BR.json' },

                initComplete: function () {
                    const api = this.api();
                    window.dataTable = api; // para busca / export externos

                    // Export acionado pelos botões do TopBar
                    $('#exportExcel').on('click', () => api.button('.buttons-excel').trigger());
                    $('#exportCsv').on('click',   () => api.button('.buttons-csv').trigger());
                    $('#exportPdf').on('click',   () => api.button('.buttons-pdf').trigger());
                    $('#exportPrint').on('click', () => api.button('.buttons-print').trigger());

                    // Selecionar todos
                    $('#checkAll').on('change', function () {
                        const checked = this.checked;
                        $('#tblFuncoes tbody .row-check').prop('checked', checked);
                    });
                    api.on('draw', function(){ $('#checkAll').prop('checked', false); });

                    // Exclusão em massa (botão do TopBar)
                    $('#btnExcluirSelecionados').on('click', async function (e) {
                        e.preventDefault();
                        await bulkDelete();
                    });
                }
            });

            // Exclusão de 1 item
            $(document).on('click', '#tblFuncoes a.js-del-one', async function (e) {
                e.preventDefault(); e.stopPropagation();
                const $btn = $(this);
                if ($btn.hasClass('disabled')) return;

                const row = dt.row($btn.closest('tr').hasClass('child') ? $btn.closest('tr').prev() : $btn.closest('tr')).data();
                if (!row) return;

                const s = (row.cdsistema || '').trim();
                const f = (row.cdfuncao  || '').trim();
                const token = $btn.data('token') || row.deleteToken || '';
                const href  = this.href; // fallback (Delete padrão)

                try {
                    if (window.confirmModal) {
                        await window.confirmModal({
                            title: 'Excluir registro',
                            message: `Confirma excluir a função <b>${f}</b> do sistema <b>${s}</b>?`,
                            okText: 'Excluir', okClass: 'btn-danger'
                        });
                    } else if (!window.confirm(`Excluir a função "${f}" do sistema "${s}"?`)) {
                        return;
                    }
                } catch { return; }

                const previous = $btn.html();
                $btn.addClass('disabled').attr('aria-disabled', 'true').css('pointer-events', 'none')
                    .html('<i class="fa fa-spinner fa-spin"></i>');

                try {
                    let res;
                    const af = anti();

                    if (token) {
                        // DeleteByToken (POST JSON + AntiForgery header)
                        res = await fetch(routes.delByToken, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json; charset=utf-8',
                                'RequestVerificationToken': af
                            },
                            body: JSON.stringify({ token })
                        });
                    } else {
                        // Fallback: POST para /Delete?cdsistema=..&cdfuncao=..
                        res = await fetch(href, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                'X-Requested-With': 'XMLHttpRequest',
                                'RequestVerificationToken': af
                            },
                            body: new URLSearchParams({ '__RequestVerificationToken': af })
                        });
                    }

                    if (!res.ok) {
                        const t = await res.text(); throw new Error(t || 'Erro ao excluir.');
                    }

                    dt.ajax.reload(null, false);
                    window.showToast?.({ title: 'Sucesso', message: 'Registro excluído com sucesso.', variant: 'success' });
                } catch (err) {
                    window.showToast?.({ title: 'Erro', message: err?.message || 'Falha ao excluir.', variant: 'danger' });
                } finally {
                    $btn.removeClass('disabled').removeAttr('aria-disabled').css('pointer-events', '').html(previous);
                }
            });

            // Exclusão em massa
            async function bulkDelete() {
                const api = window.dataTable;
                const checks = $('#tblFuncoes tbody .row-check:checked');
                if (!checks.length) {
                    window.showToast?.({ title: 'Atenção', message: 'Selecione ao menos um registro.', variant: 'warning' });
                    return;
                }

                try {
                    if (window.confirmModal) {
                        await window.confirmModal({
                            title: 'Excluir selecionados',
                            message: `Você está prestes a excluir <b>${checks.length}</b> registro(s). Deseja continuar?`,
                            okText: 'Excluir', okClass: 'btn-danger'
                        });
                    } else if (!window.confirm(`Excluir ${checks.length} registro(s)?`)) {
                        return;
                    }
                } catch { return; }

                const af = anti();
                let ok = 0, fail = 0, lastErr = '';

                // Processa um a um (seguro c/ token quando disponível)
                for (const el of checks.toArray()) {
                    const tr  = $(el).closest('tr');
                    const row = api.row(tr.hasClass('child') ? tr.prev() : tr).data();
                    if (!row) { fail++; continue; }

                    const s = encodeURIComponent((row.cdsistema || '').trim());
                    const f = encodeURIComponent((row.cdfuncao  || '').trim());
                    const token = row.deleteToken || '';
                    const href  = `${routes.del}?cdsistema=${s}&cdfuncao=${f}`;

                    try {
                        let res;
                        if (token) {
                            res = await fetch(routes.delByToken, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json; charset=utf-8',
                                    'RequestVerificationToken': af
                                },
                                body: JSON.stringify({ token })
                            });
                        } else {
                            res = await fetch(href, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                    'X-Requested-With': 'XMLHttpRequest',
                                    'RequestVerificationToken': af
                                },
                                body: new URLSearchParams({ '__RequestVerificationToken': af })
                            });
                        }

                        if (!res.ok) {
                            fail++;
                            lastErr = (await res.text()) || `HTTP ${res.status}`;
                        } else {
                            ok++;
                        }
                    } catch (e) {
                        fail++; lastErr = e?.message || 'Erro';
                    }
                }

                api.ajax.reload(null, false);
                if (fail === 0) {
                    window.showToast?.({ title: 'Sucesso', message: `Excluídos: ${ok}`, variant: 'success' });
                } else if (ok === 0) {
                    window.showToast?.({ title: 'Erro', message: `Nenhum excluído. ${lastErr || ''}`.trim(), variant: 'danger' });
                } else {
                    window.showToast?.({ title: 'Parcial', message: `Excluídos: ${ok} • Falharam: ${fail}${lastErr ? ` — ${lastErr}` : ''}`, variant: 'warning' });
                }
            }
        })();
    </script>

    <script>
        // Toast genérico (usa o seu _ToastContainer.cshtml no layout)
        window.showToast = function({ title='Aviso', message='', variant='info', delay=3500 }={}){
          const el = document.getElementById('layoutToast');
          if (!el || !window.bootstrap){ alert(message || title); return; }
          const header = el.querySelector('.toast-header');
          const titleEl = el.querySelector('.toast-header .me-auto');
          const bodyEl  = el.querySelector('.toast-body');
          if (titleEl) titleEl.textContent = title;
          if (bodyEl)  bodyEl.textContent  = message;
          header.classList.remove('bg-success','bg-danger','bg-warning','bg-info','text-white');
          const map = { success:'bg-success', danger:'bg-danger', warning:'bg-warning', info:'bg-info' };
          if (map[variant]) header.classList.add(map[variant],'text-white');
          bootstrap.Toast.getOrCreateInstance(el,{ autohide:true, delay }).show();
        };
    </script>

    <script src="~/js/DataHora.js" asp-append-version="true"></script>
}
