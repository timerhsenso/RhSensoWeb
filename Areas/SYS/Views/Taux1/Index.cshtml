@using System.Text.Json
@using RhSensoWeb.Helpers

@{
    ViewBag.Areas = "SYS";
    ViewBag.Views = "Taux1";
    ViewBag.Controller = "Taux1";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    ViewBag.gridName = "#gridTaux1";
    ViewBag.Title = "Tabelas Auxiliares";    
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

@{
    var acts = PermissionAccessHelper.GetActions(Context, "RHU", "RHU_FM_TAUX1");
    ViewBag.iHabilitaBtnNovo = acts.Contains("I");
    ViewBag.iCanDelete = acts.Contains("E");
    ViewBag.iCanEdit = acts.Contains("A");
    ViewBag.iCanExport = acts.Contains("C");

    var perms = new
    {
        canDelete = acts.Contains("E"),
        canEdit = acts.Contains("A")
    };
}

@{
    // URLs da action Create
    var icreateGet = Url.Action("Create", "Taux1", new { area = "SYS" });
    var icreatePost = icreateGet; // se o POST for a mesma rota, reaproveite

    // Parâmetros para o _TopbarSharedGrid
    ViewBag.aHref = icreateGet;            // fallback de navegação
    ViewBag.dataContext = "Taux1";         // mesmo "context" do DTUtil.createAjaxDataTable
    ViewBag.dataTable = "#gridTaux1";      // seletor do DataTable para dar reload após salvar
    ViewBag.dataUseModal = true;           // true = abrir no modal; false = navegar
    ViewBag.dataTitle = "Nova Tabela Auxiliar";  // título do modal
    ViewBag.dataCreateGet = icreateGet;    // GET que renderiza o formulário (partial quando AJAX)
    ViewBag.dataCreatePost = icreatePost;  // POST que grava
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")
@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<div class="card shadow-sm">
    <div class="card-body">
        <table id="gridTaux1" class="table table-striped table-hover w-100"></table>
    </div>
</div>

@* Observação:
   Os partials de modal (_FormModal.cshtml e _ConfirmModal.cshtml) devem estar inclusos UMA VEZ no layout (_VerticalLayout),
   antes dos scripts do rodapé. Se não estiverem, o DTUtil cai em fallback de navegação (sem modal). *@

@section Scripts {
    <script>
        $(function () {
            const perms = @Html.Raw(JsonSerializer.Serialize(perms));

            // Monte o array de ações de acordo com as permissões
            const actions = [
                { name:'gotoTaux2', icon:'fa-list', class:'btn-outline-secondary', title:'Visualizar Itens' },
                ...(perms.canEdit   ? [{ name:'edit',   icon:'fa-pen',   class:'btn-outline-primary', title:'Editar'  }] : []),
                ...(perms.canDelete ? [{ name:'delete', icon:'fa-trash', class:'btn-outline-danger',  title:'Excluir' }] : [])
            ];

            // =============================
            // 1) DataTable (DTUtil v4)
            // =============================
            DTUtil.createAjaxDataTable({
                table: '#gridTaux1',
                context: 'Taux1',
                useModal: true,
                rowId: 'Cdtptabela',
                tokenField: 'deleteToken', // se a API devolver "token", o handler abaixo faz fallback
                exportName: 'TabelasAuxiliares',

                routes: {
                    list: '/SYS/Taux1/GetData',
                    createGet: '/SYS/Taux1/Create',
                    createPost: '/SYS/Taux1/Create',
                    editGet: '/SYS/Taux1/Edit/{id}',
                    editPost: '/SYS/Taux1/Edit/{id}',
                    deletePost: '/SYS/Taux1/DeleteByToken',
                    deleteBatchPost: '/SYS/Taux1/DeleteBatch'
                },

                // Colunas (a 1ª = seleção; a última = ações são geradas pelo DTUtil)
                fields: [
                    { data: 'Cdtptabela', title: 'Código', width: '120px' },
                    { data: 'Dctabela', title: 'Descrição' }
                ],

                actions: actions
            });

            // ==========================================
            // 2) "Selecionar todos" (só 1ª coluna)
            //    -> NÃO afeta outros controles
            // ==========================================
            const $table = $('#gridTaux1');

            // Atualiza estado (checked/indeterminate) do checkbox do cabeçalho
            function updateHeaderState() {
                const $rowChecks = $table.find('tbody td:first-child input.dt-row-select[type=checkbox]');
                const $headCheck = $table.find('thead .check-all');
                const total = $rowChecks.length;
                const marc  = $rowChecks.filter(':checked').length;

                if (!total) {
                    $headCheck.prop('checked', false).prop('indeterminate', false);
                    return;
                }
                $headCheck.prop('checked', marc > 0 && marc === total);
                $headCheck.prop('indeterminate', marc > 0 && marc < total);
            }

            // Insere o checkbox no 1º <th> quando o DataTable inicializa
            $table.on('init.dt', function () {
                const $th0 = $table.find('thead th').eq(0).addClass('text-center col-select');
                if (!$th0.find('.check-all').length) {
                    $th0.html('<input type="checkbox" class="form-check-input check-all" title="Selecionar todos">');
                }
            });

            // Marcar/desmarcar todas as linhas (APENAS 1ª coluna)
            $table.on('change', 'thead .check-all', function () {
                const mark = this.checked;
                $table
                    .find('tbody td:first-child input.dt-row-select[type=checkbox]')
                    .prop('checked', mark)
                    .trigger('change'); // mantém integração com seleção de linha (se existir)
                updateHeaderState();
            });

            // A cada redraw:
            //  - coloca a classe dt-row-select APENAS nos checkboxes da 1ª coluna
            //  - recalcula o estado do cabeçalho
            $table.on('draw.dt', function () {
                $table
                    .find('tbody td:first-child input[type=checkbox]')
                    .addClass('dt-row-select'); // marcador para diferenciar de outros controles
                updateHeaderState();
            });

            // Quando o usuário marca/desmarca uma linha individualmente => reflete no cabeçalho
            $table.on('change', 'tbody td:first-child input.dt-row-select[type=checkbox]', updateHeaderState);

            // ==========================================
            // 3) Ações opcionais (ex.: delete/detail)
            // ==========================================
            DTUtil.actions.on('Taux1', 'delete', async ({ id, meta, dt, button }) => {
                const row   = dt.row($(button).closest('tr')).data() || {};
                // fallback para nome do token
                const token = row?.[meta.tokenField] ?? row?.token ?? row?.deleteToken;
                if (!token) return (window.AppNotifier ? AppNotifier.warn('Token ausente para exclusão.') : alert('Token ausente para exclusão.'));

                const ok = window.AppModal?.confirm
                    ? await AppModal.confirm('Excluir este registro?')
                    : confirm('Excluir este registro?');

                if (!ok) return;

                $.ajax({
                    url: meta.routes.deletePost,
                    type: 'POST',
                    contentType: 'application/json; charset=UTF-8',
                    data: JSON.stringify({ token })
                })
                .done(() => {
                    window.AppNotifier && AppNotifier.success('Excluído com sucesso.');
                    dt.ajax.reload(null, false);
                })
                .fail(xhr => (window.AppAjax ? AppAjax.handleError(xhr) : alert('Erro ao excluir.')));
            });

        DTUtil.actions.on('Taux1', 'gotoTaux2', async ({ id, dt, button }) => {
            // pega o objeto da linha onde o botão foi clicado
            const row = dt.row($(button).closest('tr')).data() || {};
            const dctabela = row?.Dctabela ?? '';

            // preenche os hiddens e envia o form
            document.getElementById('gotoTaux2_cdtptabela').value = id;
            document.getElementById('gotoTaux2_dctabela').value   = dctabela;

            document.getElementById('frmGotoTaux2').submit();
        });

            // ==========================================
            // 4) Busca / limpeza de busca
            // ==========================================
            DTUtil.bindInputSearch('#searchGrid', '#gridTaux1');
            DTUtil.bindClearSearch('#btnLimpaPesquisa', '#searchGrid', '#gridTaux1', { reload: true, resetPaging: true });
        });
    </script>
}


<form id="frmGotoTaux2" method="post"
      asp-area="SYS"
      asp-controller="Taux2"
      asp-action="OpenFromParent"
      class="d-inline">
    @Html.AntiForgeryToken()
    <input type="hidden" name="cdtptabela" id="gotoTaux2_cdtptabela">
    <input type="hidden" name="dctabela" id="gotoTaux2_dctabela">
</form>



