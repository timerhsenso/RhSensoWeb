@using System.Text.Json
@using RhSensoWeb.Helpers

@{
    ViewBag.Areas = "SYS";
    ViewBag.Views = "Taux2";
    ViewBag.Controller = "Taux2";
    ViewBag.HabilitaBtnNovo = true;
    ViewBag.HabilitaBtnExportar = true;
    ViewBag.gridName = "#gridTaux2";
    ViewBag.Title = "Situações Auxiliares";
    ViewBag.SubTitle = "Comum";
    Layout = "~/Views/Shared/_VerticalLayout.cshtml";
}

@{
    var acts = PermissionAccessHelper.GetActions(Context, "RHU", "RHU_FM_TAUX1");
    ViewBag.iHabilitaBtnNovo = acts.Contains("I");
    ViewBag.iCanDelete = acts.Contains("E");
    ViewBag.iCanEdit = acts.Contains("A");
    ViewBag.iCanExport = acts.Contains("C");

    var perms = new
    {
        canDelete = acts.Contains("E"),
        canEdit = acts.Contains("A")
    };
}

@{
    // URLs da action Create
    var icreateGet = Url.Action("Create", "Taux2", new { area = "SYS" });
    var icreatePost = icreateGet; // se o POST for a mesma rota, reaproveite

    // Parâmetros para o _TopbarSharedGrid
    ViewBag.aHref = icreateGet;            // fallback de navegação
    ViewBag.dataContext = "Taux2";
    ViewBag.dataTable = "#gridTaux2";      // seletor do DataTable para dar reload após salvar
    ViewBag.dataUseModal = true;           // true = abrir no modal; false = navegar
    ViewBag.dataTitle = "Nova Situação Auxiliar";  // título do modal
    ViewBag.dataCreateGet = icreateGet;    // GET que renderiza o formulário (partial quando AJAX)
    ViewBag.dataCreatePost = icreatePost;  // POST que grava
}

@await Html.PartialAsync("~/Views/Shared/Partials/_PageTitle.cshtml")
@await Html.PartialAsync("~/Views/Shared/Partials/_TopBarShearhGrid.cshtml")

<div class="card shadow-sm">
    <div class="card-body">
        <table id="gridTaux2" class="table table-striped table-hover w-100"></table>
    </div>
</div>

@section scripts {
    <script>
        $(function () {
            const perms = @Html.Raw(JsonSerializer.Serialize(perms));

            const actions = [
                ...(perms.canEdit   ? [{ name:'edit',   icon:'fa-pen',   class:'btn-outline-primary', title:'Editar'  }] : []),
                ...(perms.canDelete ? [{ name:'delete', icon:'fa-trash', class:'btn-outline-danger',  title:'Excluir' }] : [])
            ];

            // =============================
            // 1) DataTable (DTUtil v4)
            // =============================
            DTUtil.createAjaxDataTable({
                table: '#gridTaux2',
                context: 'Taux2',
                useModal: true,
                rowId: 'RowId',                 // Cdtptabela|Cdsituacao
                tokenField: 'deleteToken',
                exportName: 'SituacoesAuxiliares',

                routes: {
                    list: '/SYS/Taux2/GetData',
                    createGet: '/SYS/Taux2/Create',
                    createPost: '/SYS/Taux2/Create',
                    editGet: '/SYS/Taux2/Edit/{id}',
                    editPost: '/SYS/Taux2/Edit/{id}',
                    deletePost: '/SYS/Taux2/DeleteByToken',
                    deleteBatchPost: '/SYS/Taux2/DeleteBatch'
                },

                // Colunas (1ª = seleção; última = ações vêm do DTUtil)
                fields: [
                    { data: 'Cdtptabela', title: 'Cód. Tipo', width: '120px' },
                    { data: 'Cdsituacao', title: 'Cód. Situação', width: '120px' },
                    { data: 'Dcsituacao', title: 'Descrição' },
                    { data: 'Noordem',    title: 'Ordem', width: '90px', render: d => d ?? '' },
                    { data: 'Ativo',      title: 'Ativo', width: '90px', render: d => d ? 'Sim' : 'Não' }
                ],

                actions: actions
            });

            // =============================
            // 2) Handlers de ações
            // =============================
            DTUtil.actions.on('Taux2', 'delete', async ({ id, meta, dt, button }) => {
                const row   = dt.row($(button).closest('tr')).data() || {};
                const token = row?.[meta.tokenField] ?? row?.token ?? row?.deleteToken;
                if (!token) return (window.AppNotifier ? AppNotifier.warn('Token ausente para exclusão.') : alert('Token ausente para exclusão.'));

                const ok = window.AppModal?.confirm
                    ? await AppModal.confirm('Excluir este registro?')
                    : confirm('Excluir este registro?');

                if (!ok) return;

                $.ajax({
                    url: meta.routes.deletePost,
                    type: 'POST',
                    contentType: 'application/json; charset=UTF-8',
                    data: JSON.stringify({ token })
                })
                .done(() => {
                    window.AppNotifier && AppNotifier.success('Excluído com sucesso.');
                    dt.ajax.reload(null, false);
                })
                .fail(xhr => (window.AppAjax ? AppAjax.handleError(xhr) : alert('Erro ao excluir.')));
            });

            // =============================
            // 3) Busca / limpeza de busca
            // =============================
            DTUtil.bindInputSearch('#searchGrid', '#gridTaux2');
            DTUtil.bindClearSearch('#btnLimpaPesquisa', '#searchGrid', '#gridTaux2', { reload: true, resetPaging: true });
        });
    </script>
    


}

<!--//-->
<script>
    document.addEventListener('DOMContentLoaded', () => {
      const gridName = '#gridTaux2';

      // Garante que SEMPRE mandaremos o filtro na chamada do DataTables
      $(gridName).on('preXhr.dt', function (_e, _settings, data) {
        data.cdtptabela = document.getElementById('cdtptabelaFiltro')?.value || '';
      });

      // Se o grid já foi criado pelo seu DTUtil, apenas recarrega pra aplicar o filtro;
      // caso você crie o grid aqui, mantenha este reload após o create.
      //const dt = $(gridName).DataTable();
      //dt.ajax.reload(null, true); // força nova chamada já com o cdtptabela
    });
</script>

@{
    var filtro = (string)(ViewBag.CdtptabelaFiltro ?? "");
}
<input type="hidden" id="cdtptabelaFiltro" value="@filtro" />


